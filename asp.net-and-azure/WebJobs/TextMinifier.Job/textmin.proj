<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="12.0" DefaultTargets="BuildAll">

  <!-- This file is designed to be executed from the OutputRoot\ directory not the source directory -->

  <Import Project="$(SharedProps)" Condition=" '$(SharedProps)'!='' "/>
  <Import Project="$(MSBuildThisFileDirectory)..\shared.props" Condition=" '$(SharedProps)'=='' " />

  <PropertyGroup>
    <NuspecFile Condition=" '$(NuspecFile)'=='' ">$(MSBuildThisProjectDirectory)textmin.nuspec</NuspecFile>
    <NugetSourceRoot Condition=" ''=='' ">$(TextMinSourceRoot)</NugetSourceRoot>
    <PackageRoot Condition=" '$(PackageRoot)'=='' ">$(ObjRoot)_TextMinNuGet\</PackageRoot>
    <_ls-textminoutfolder Condition=" '$(_ls-textminoutfolder)'=='' ">$(ObjRoot)TextMinifier.Job\</_ls-textminoutfolder>
  </PropertyGroup>

  <ItemGroup>
    <!-- This item should never have more than 1 value -->
    <_NugetSpecFile Include="$(NuspecFile)" />

    <!-- Standard declarations -->
    <LibItems Include="$(NugetSourceRoot)NuGet\lib\**\*" />
    <ContentItems Include="$(NugetSourceRoot)NuGet\content\**\*"/>
    <ToolsItems Include="$(TextMinSourceRoot)NuGet\tools\**\*" />
           
    <ToolsItems Include="$(_ls-textminoutfolder)*.*"
                Exclude="$(_ls-textminoutfolder)*.pdb;$(_ls-textminoutfolder)*.nuspec;$(_ls-textminoutfolder)*.proj"/>
    
    <!-- copy the same file as ImageCompressor -->
    <!--<ToolsItems Include="$(OutputPathImgComp)NuGet\tools\azure-jobs.psm1" />-->  
  </ItemGroup>

  <PropertyGroup>
    <BuildAllDependsOn>
      $(BuildAllDependsOn);
      CreateNugetPackage;
      CreateSiteExtensionNuGetPkg;
    </BuildAllDependsOn>
  </PropertyGroup>
  <Target Name="BuildAll" DependsOnTargets="$(BuildAllDependsOn)"/>

  <PropertyGroup>
    <CreateNugetPackageDependsOn>
      PrepareAndPopulateNugetFolder;
      UpdateNuspecFile;
      CoreCreateNugetPackage;
    </CreateNugetPackageDependsOn>
  </PropertyGroup>
  <Target Name="CreateNugetPackage" DependsOnTargets="$(CreateNugetPackageDependsOn)" />

  <Target Name="CoreCreateNugetPackage">
    <!-- nuget pack "C:\...\<filename>.nuspec" -NoPackageAnalysis -OutputDirectory "C:\...\Output\" -->
    <PropertyGroup>
      <!--<_NugetSpecFile>%(_NugetSpecOutputFile.FullPath)</_NugetSpecFile>-->
      <_Cmd>"$(NugetExe)" pack "$(_NugetSpecFile)" -NoPackageAnalysis -OutputDirectory "$(BinRootNoTrailingSlash)" </_Cmd>
    </PropertyGroup>

    <Message Text="_Cmd: $(_Cmd)" Importance="low" />
    <Exec Command="$(_Cmd)"/>

    <ItemGroup>
      <_CreatedPackage Include="$(BinRoot)*.nupkg"/>
    </ItemGroup>

    <Copy SourceFiles="@(_CreatedPackage)"
          DestinationFiles="@(_CreatedPackage->'$(NugetLocalRepo)%(Filename)%(Extension)')"
          Condition="Exists('$(NugetLocalRepo)')"/>
  </Target>

  <!--
  This target populates the following dynamic properties:
    $(_NugetSpecFile)
  -->
  <Target Name="PrepareAndPopulateNugetFolder">
    <Copy SourceFiles="@(_NugetSpecFile)"
          DestinationFiles="@(_NugetSpecFile->'$(PackageRoot)%(Filename)%(Extension)')">
      <Output ItemName="_NugetSpecOutputFile" TaskParameter="DestinationFiles"/>
    </Copy>
    <Message Text="ToolsItems: [@(ToolsItems)]
ToolsItems :[@(ContentItems)]
ContentItems : [@(ContentItems)]
LibItems : [@(LibItems)]
NuGetRootItems : [@(NuGetRootItems)]" Importance="low"/>

    <Copy SourceFiles="@(ToolsItems)"
          DestinationFiles="@(ToolsItems->'$(PackageRoot)tools\%(DestDir)%(Filename)%(Extension)')"/>

    <Copy SourceFiles="@(ContentItems)"
          DestinationFiles="@(ContentItems->'$(PackageRoot)content\%(DestDir)%(Filename)%(Extension)')"/>
    <Copy SourceFiles="@(LibItems)"
          DestinationFiles="@(LibItems->'$(PackageRoot)lib\%(DestDir)%(Filename)%(Extension)')"/>

    <Copy SourceFiles="@(NuGetRootItems)"
          DestinationFiles="@(NuGetRootItems->'$(PackageRoot)%(DestDir)%(Filename)%(Extension)')" />

    <PropertyGroup>
      <_NugetSpecFile>%(_NugetSpecOutputFile.FullPath)</_NugetSpecFile>
    </PropertyGroup>
  </Target>

  <PropertyGroup>
    <UpdateNuspecFileDependsOn>
      $(UpdateNuspecFileDependsOn);
      PrepareAndPopulateNugetFolder
    </UpdateNuspecFileDependsOn>
  </PropertyGroup>
  <Target Name="UpdateNuspecFile" DependsOnTargets="$(UpdateNuspecFileDependsOn)">
    <Message Text="Updating nuspec file to have version: [file='$(_NugetSpecFile)',version='$(NuGetPkgVerNum)']" Importance="high"/>

    <XmlPoke Namespaces="&lt;Namespace Prefix='dft' Uri='$(NuSpecXmlNs)'/&gt;"
             XmlInputPath="$(_NugetSpecFile)"
             Query="$(NuspecXpath)"
             Value="$(NuGetPkgVerNum)" />
  </Target>

  <!--
  *************************************************************************
  Elements related to creating the SiteExtension nuget package.
  *************************************************************************
  -->

  <PropertyGroup>
    <SiteExtNuSpecFile Condition=" '$(SiteExtNuSpecFile)'=='' ">$(MSBuildThisProjectDirectory)SiteExtension\site-extension.nuspec</SiteExtNuSpecFile>
    <SiteExtensionPackageRoot Condition=" '$(SiteExtensionPackageRoot)'=='' ">$(ObjRoot)_SiteExtension-Min\</SiteExtensionPackageRoot>
    <SiteExtTextMinNuSpecOutputFile Condition=" '$(SiteExtTextMinNuSpecOutputFile)'=='' ">$(SiteExtensionPackageRoot)site-extension.nuspec</SiteExtTextMinNuSpecOutputFile>
  </PropertyGroup>
  <ItemGroup>
    <!--This item should never have more than 1 value-->
    <_SiteExtNuSpecFile Include="$(SiteExtNuSpecFile)"/>

    <_SiteExtContentFiles Include="$(MSBuildThisProjectDirectory)SiteExtension\**\*"
                          Exclude="$(MSBuildThisProjectDirectory)SiteExtension\*.nuspec"/>

    <_SiteExtContentFiles Include="$(SiteExtPubWebsitesContentPath)**\*"
                          Exclude="$(SiteExtPubWebsitesContentPath)**\*.pdb">
      <DestDir>%(RecursiveDir)</DestDir>
    </_SiteExtContentFiles>
  </ItemGroup>

  <PropertyGroup>
    <CreateSiteExtensionNuGetPkgDependsOn>
      $(CreateSiteExtensionNuGetPkgDependsOn);
      SiteExtensionPrepareAndPopulateNugetFolder;
      TransformOutputFiles;
      SiteExtensionCoreCreateNugetPackage;
    </CreateSiteExtensionNuGetPkgDependsOn>
  </PropertyGroup>
  <Target Name="CreateSiteExtensionNuGetPkg" DependsOnTargets="$(CreateSiteExtensionNuGetPkgDependsOn)"/>

  <Target Name="SiteExtensionCoreCreateNugetPackage">
    <MakeDir Directories="$(SiteExtOutputRoot)"/>
    <!-- nuget pack "C:\...\<filename>.nuspec" -NoPackageAnalysis -OutputDirectory "C:\...\Output\" -->
    <PropertyGroup>
      <!--<_NugetSpecFile>%(_NugetSpecOutputFile.FullPath)</_NugetSpecFile>-->
      <_Cmd>"$(NugetExe)" pack "$(_SiteExtensionNugetSpecOutputFile)" -NoPackageAnalysis -OutputDirectory "$(SiteExtOutputRootNoTrailingSlash)" </_Cmd>
    </PropertyGroup>

    <Message Text="_Cmd: $(_Cmd)" Importance="low" />
    <Exec Command="$(_Cmd)"/>
  </Target>

  <PropertyGroup>
    <TransformOutputFilesDependsOn>
      $(TransformOutputFilesDependsOn);
      UpdateSiteExtensionNuSpecFile;
      UpdateSiteExtWebConfig;
    </TransformOutputFilesDependsOn>
  </PropertyGroup>
  <Target Name="TransformOutputFiles" DependsOnTargets="$(TransformOutputFilesDependsOn)"/>
  
 <Target Name="UpdateSiteExtensionNuSpecFile" DependsOnTargets="SiteExtensionPrepareAndPopulateNugetFolder">
    <PropertyGroup>
      <_tmp>$([System.IO.Path]::GetFullPath('$(SiteExtNuSpecFile)'))</_tmp>
    </PropertyGroup>
    <Message Text="Updating site extension nuspec file to have version: [file='$(_tmp)',version='$(NuGetPkgVerNum)']" />

    <XmlPoke Namespaces="&lt;Namespace Prefix='dft' Uri='$(NuSpecXmlNs)'/&gt;"
             XmlInputPath="$(SiteExtTextMinNuSpecOutputFile)"
             Query="$(NuspecXpath)"
             Value="$(SiteExtNuGetPkgVerNum)" />
  </Target>
  <PropertyGroup>
    <UpdateSiteExtWebConfigDependsOn>
      $(UpdateSiteExtWebConfigDependsOn);
    </UpdateSiteExtWebConfigDependsOn>
    
    <SiteExtWebConfigXPath Condition=" '$(SiteExtWebConfigXPath)'=='' ">configuration/appSettings/add[@key='file']/@value</SiteExtWebConfigXPath>
    <SiteExtWebConfigColorXPath Condition=" '$(SiteExtWebConfigColorXPath)'=='' ">configuration/appSettings/add[@key='color']/@value</SiteExtWebConfigColorXPath>
    <SiteExtAppSettingFileTextMin Condition=" '$(SiteExtAppSettingFileTextMin)'=='' ">D:\home\site\wwwroot\app_data\TextMinifier.Job.exe.csv</SiteExtAppSettingFileTextMin>
    <SiteExtAppSettingColorTextMin Condition=" '$(SiteExtAppSettingColorTextMin)'=='' ">darkorange</SiteExtAppSettingColorTextMin>
</PropertyGroup>
  <Target Name="UpdateSiteExtWebConfig" DependsOnTargets="$(UpdateSiteExtWebConfigDependsOn)">
    <PropertyGroup>
      <_fileToUpdate>$(SiteExtensionPackageRoot)\content\web.config</_fileToUpdate>
    </PropertyGroup>
    
    <Message Text="Updating site extension web.config [$(_fileToUpdate)] app settings to [$(SiteExtAppSettingFileTextMin)]" Importance="high"/>

    <XmlPoke 
         XmlInputPath="$(_fileToUpdate)"
         Query="$(SiteExtWebConfigXPath)"
         Value="$(SiteExtAppSettingFileTextMin)" />

    <XmlPoke
     XmlInputPath="$(_fileToUpdate)"
     Query="$(SiteExtWebConfigColorXPath)"
     Value="$(SiteExtAppSettingColorTextMin)" />

    <XmlPoke
     XmlInputPath="$(_fileToUpdate)"
     Query="configuration/appSettings/add[@key='name']/@value"
     Value="Azure Minifier" />
  </Target>
  
  <!--
  This target populates the following dynamic properties:
    $(_SiteExtensionNugetSpecOutputFile)
  -->
  <PropertyGroup>
    <SiteExtensionPrepareAndPopulateNugetFolderDependsOn>
      $(SiteExtensionPrepareAndPopulateNugetFolderDependsOn);
    </SiteExtensionPrepareAndPopulateNugetFolderDependsOn>
  </PropertyGroup>

  <Target Name="SiteExtensionPrepareAndPopulateNugetFolder"
          DependsOnTargets="$(SiteExtensionPrepareAndPopulateNugetFolderDependsOn)">
    <MakeDir Directories="$(SiteExtensionPackageRoot)"/>
    <Message Text="_SiteExtContentFiles: [@(_SiteExtContentFiles)]" Importance="low"/>

    <Copy SourceFiles="@(_SiteExtNuSpecFile)"
          DestinationFiles="@(_SiteExtNuSpecFile->'$(SiteExtensionPackageRoot)%(Filename)%(Extension)')">
      <Output ItemName="_SiteExtensionNugetSpecOutputFile" TaskParameter="DestinationFiles"/>
    </Copy>

    <Copy SourceFiles="@(_SiteExtContentFiles)"
          DestinationFiles="@(_SiteExtContentFiles->'$(SiteExtensionPackageRoot)content\%(DestDir)%(Filename)%(Extension)')"/>

    <PropertyGroup>
      <_SiteExtensionNugetSpecOutputFile>%(_SiteExtensionNugetSpecOutputFile.FullPath)</_SiteExtensionNugetSpecOutputFile>
    </PropertyGroup>
  </Target>
</Project>
